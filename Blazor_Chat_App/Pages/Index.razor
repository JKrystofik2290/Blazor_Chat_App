@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@page "/"

<div class="modal fade" id="getUsername" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Welcome To My Blazor Chat App!</h5>
            </div>
            <div class="modal-body">
                <label>Choose A Username:</label>
                <input type="text" class="form-control" @bind-value="_userName" @bind-value:event="oninput" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="NewUserJoined" data-dismiss="modal" disabled="@(!IsConnected)">Join Chat</button>
            </div>
        </div>
    </div>
</div>

<div class="title"><h1>Blazor Chat App</h1></div>

<hr />

<div class="userlist">
    <h3>Users In Chat:</h3>
    <ul>
        @foreach (string user in _usersInChat)
        {
            <li>@user</li>
        }
    </ul>
</div>

<hr />

<div class="chatbox">
    <h3>Messages:</h3>
    <ul id="messageList">
        @foreach (string[] chatMsg in _chatMessages)
        {
            if (chatMsg[0] == _userName)
            {
                <li class="sentMsg">@chatMsg[0] : @chatMsg[1]</li>
            }
            else
            {
                <li class="recMsg">@chatMsg[0] : @chatMsg[1]</li>
            }
        }
    </ul>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <label>
                Message: <input type="text" class="form-control" @onkeydown="KeyBoardEventHandler" @bind-value="_msg" @bind-value:event="oninput" />
            </label>
        </div>
        <button @onclick="SendMsg" @onkeydown="KeyBoardEventHandler" disabled="@(!IsConnected)">Send</button>
    </div>
</div>

@code{

    private HubConnection _hubConnection;

    private string _userName = "";
    private string _msg = "";
    private List<string[]> _chatMessages = new List<string[]>();
    private List<string> _usersInChat = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat")).Build();
        _hubConnection.On<string, string>("ReceiveMessage", (user, msg) =>
        {
            string[] formatMsg = { user, msg };
            _chatMessages.Add(formatMsg);
            StateHasChanged();
        });

        _hubConnection.On<List<string>>("ReceiveUserList", (userList) =>
        {
            foreach (string user in userList)
            {
                if (!_usersInChat.Contains(user))
                {
                    _usersInChat.Add(user);
                }
            }
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("popup");
        }
    }


    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;


    private void SendMsg()
    {
        _hubConnection.SendAsync("SendMsg", _userName, _msg);
        _msg = "";
    }

    Task SendNewUser() => _hubConnection.SendAsync("SendNewUser", _userName);


    private void KeyBoardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            SendMsg();
            _msg = "";
        }
    }

    private void NewUserJoined()
    {
        bool sameName = _usersInChat.Contains(_userName);

        if (sameName)
        {
            int count = 1;
            while (sameName)
            {
                _userName = $"{_userName}({count})";
                sameName = _usersInChat.Contains(_userName);
                count++;
            }
        }

        SendNewUser();
        _msg = "Has Joined The Chat!";
        SendMsg();
        _msg = "";
    }
}
