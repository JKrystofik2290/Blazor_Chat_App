@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@page "/"

<div class="modal fade" id="getUsername" data-backdrop="static" data-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Welcome To My Blazor Chat App!</h5>
            </div>
            <div class="modal-body">
                <label>Choose A Username:</label>
                <input type="text" class="form-control w-100" maxlength="12"
                       onkeyup="this.value = this.value.replace(/[,]/, '')" onkeydown="this.value = this.value.replace(/[,]/, '')" 
                       @onkeypress="NewUserKeyboardHandler" @bind-value="_userName" @bind-value:event="oninput"
                       data-toggle="tooltip" data-placement="top" title="Max length 12 & no commas" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="NewUserJoined" @onkeydown="NewUserKeyboardHandler"
                        disabled="@(!IsConnected)">Join Chat</button>
            </div>
        </div>
    </div>
</div>

<div class="header">
    <h1>Blazor Chat App</h1>
    <h4>You are: @_userName</h4>
</div>

<div class="chat">
    <div class="chatBox">
        <ul class="chatList">
            @foreach (string[] chatMsg in _chatMessages)
            {
                if (chatMsg[2] == "joined")
                {
                    <li class="joinedMsg">@chatMsg[0] Has Joined The Chat!</li>
                }
                else if (chatMsg[2] == "left")
                {
                    <li class="leftMsg">@chatMsg[0] Has Left The Chat!</li>
                }
                else
                {
                    if (chatMsg[0] == _userName)
                    {
                        <li class="sentMsg">@chatMsg[0] : @chatMsg[1]</li>
                    }
                    else
                    {
                        <li class="recMsg">@chatMsg[0] : @chatMsg[1]</li>
                    }
                }
            }
        </ul>
    </div>

    <div class="userlist">
        <h4>Users In Chat:</h4>
        <ul>
            @foreach (string user in _usersInChat)
            {
                <li>@user</li>
            }
        </ul>
    </div>

    <div class="msgbox">
        <input type="text" class="form-control" @onkeydown="SendMsgKeyboardHandler" @bind-value="_msg" @bind-value:event="oninput" />
        <button class="btn btn-primary" @onclick="SendMsg" @onkeydown="SendMsgKeyboardHandler" disabled="@(!IsConnected)">Send</button>
    </div>
</div>


@code{

    private HubConnection _hubConnection;
    private string _userName = "";
    private string _msg = "";
    private string _msgFlag = "";
    private List<string[]> _chatMessages = new List<string[]>();
    private List<string> _usersInChat = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat")).Build();

        _hubConnection.On<string, string, string>("ReceiveMessage", (user, msg, flag) =>
        {
            string[] formatMsg = { user, msg, flag };
            _chatMessages.Add(formatMsg);
            StateHasChanged();
        });

        _hubConnection.On<List<string>>("ReceiveUserList", (userList) =>
        {
            _usersInChat = userList;

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetUserList();
            await JSRuntime.InvokeVoidAsync("ShowPopup");
        }
    }


    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;


    private void SendMsg()
    {
        _hubConnection.SendAsync("SendMsg", _userName, _msg, _msgFlag);
        _msg = "";
    }


    private Task GetUserList() => _hubConnection.SendAsync("SendUserList");


    private Task SendNewUser() => _hubConnection.SendAsync("SendNewUser", _userName);


    private Task RemoveUser() => _hubConnection.SendAsync("RemoveUser", _userName);


    private async void NewUserJoined()
    {
        await JSRuntime.InvokeVoidAsync("HidePopup");
        await GetUserList();
        bool sameName = _usersInChat.Contains(_userName);

        if (sameName)
        {
            int count = 1;
            while (sameName)
            {
                _userName = $"{_userName}({count})";
                sameName = _usersInChat.Contains(_userName);
                count++;
            }
        }

        await SendNewUser();
        _msgFlag = "joined";
        SendMsg();
        _msgFlag = "";
    }


    public void Dispose()
    {
        RemoveUser();
        _msgFlag = "left";
        SendMsg();
        _msgFlag = "";
    }


    private void SendMsgKeyboardHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            SendMsg();
            _msg = "";
        }
    }


    private void NewUserKeyboardHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            NewUserJoined();
        }
    }

}
