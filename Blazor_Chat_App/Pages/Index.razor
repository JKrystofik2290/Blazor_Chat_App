@using System
@using System.IO
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@page "/"

<div class="modal fade" id="getUsername" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Welcome To My Blazor Chat App!</h5>
            </div>
            <div class="modal-body">
                <label>Choose A Username:</label>
                <input type="text" class="form-control" @bind-value="_userName" @bind-value:event="oninput" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="NewUserJoined" data-dismiss="modal" disabled="@(!IsConnected)">Join Chat</button>
            </div>
        </div>
    </div>
</div>

<div class="title"><h1>Blazor Chat App</h1></div>
<div><h1>@path</h1></div>

<hr />
<h3>Your Username is: @_userName</h3>
<hr />

<div class="userlist">
    <h3>Users In Chat:</h3>
    <ul>
        @foreach (string user in _usersInChat)
        {
            <li>@user</li>
        }
    </ul>
</div>

<hr />

<div class="chatbox">
    <h3>Messages:</h3>
    <ul class="messageList">
        @foreach (string[] chatMsg in _chatMessages)
        {
            if (chatMsg[2] == "joined")
            {
                <li class="joinedMsg">@chatMsg[0] Has Joined The Chat!</li>
            }
            else if (chatMsg[2] == "left")
            {
                <li class="leftMsg">@chatMsg[0] Has Left The Chat!</li>
            }
            else
            {
                if (chatMsg[0] == _userName)
                {
                    <li class="sentMsg">@chatMsg[0] : @chatMsg[1]</li>
                }
                else
                {
                    <li class="recMsg">@chatMsg[0] : @chatMsg[1]</li>
                }
            }
        }
    </ul>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <label>
                Message: <input type="text" class="form-control" @onkeydown="KeyBoardEventHandler" @bind-value="_msg" @bind-value:event="oninput" />
            </label>
        </div>
        <button @onclick="SendMsg" @onkeydown="KeyBoardEventHandler" disabled="@(!IsConnected)">Send</button>
    </div>
</div>

@code{
    string path = Directory.GetCurrentDirectory();

    private HubConnection _hubConnection;

    private string _userName = "";
    private string _msg = "";
    private string _msgFlag = "";
    private List<string[]> _chatMessages = new List<string[]>();
    private List<string> _usersInChat = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chat")).Build();
        _hubConnection.On<string, string, string>("ReceiveMessage", (user, msg, flag) =>
        {
            string[] formatMsg = { user, msg, flag };
            _chatMessages.Add(formatMsg);
            StateHasChanged();
        });

        _hubConnection.On<List<string>>("ReceiveUserList", (userList) =>
        {
            _usersInChat = userList;

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            @*await GetUserList();
                await JSRuntime.InvokeVoidAsync("popup");*@
        }
    }


    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;


    private void SendMsg()
    {
        _hubConnection.SendAsync("SendMsg", _userName, _msg, _msgFlag);
        _msg = "";
    }

    Task GetUserList() => _hubConnection.SendAsync("SendUserList");

    Task SendNewUser() => _hubConnection.SendAsync("SendNewUser", _userName);

    Task RemoveUser() => _hubConnection.SendAsync("RemoveUser", _userName);


    private void KeyBoardEventHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            SendMsg();
            _msg = "";
        }
    }

    private void NewUserJoined()
    {
        GetUserList();
        bool sameName = _usersInChat.Contains(_userName);

        if (sameName)
        {
            int count = 1;
            while (sameName)
            {
                _userName = $"{_userName}({count})";
                sameName = _usersInChat.Contains(_userName);
                count++;
            }
        }

        SendNewUser();
        _msgFlag = "joined";
        SendMsg();
        _msgFlag = "";
    }


    public void Dispose()
    {
        RemoveUser();
        _msgFlag = "left";
        SendMsg();
        _msgFlag = "";
    }

}
